openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/v1/article/{id}:
    get:
      tags:
      - article-controller
      operationId: findById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleDto'
    put:
      tags:
      - article-controller
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
    delete:
      tags:
      - article-controller
      operationId: delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/v1/auth/register:
    post:
      tags:
      - authentication-controller
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        "409":
          description: "User is already registered."
  /api/v1/auth/refresh-token:
    post:
      tags:
      - authentication-controller
      operationId: refreshToken
      responses:
        "200":
          description: OK
  /api/v1/auth/logout:
    post:
      tags:
      - authentication-controller
      operationId: logout
      responses:
        "200":
          description: OK
  /api/v1/auth/authenticate:
    post:
      tags:
      - authentication-controller
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        "403":
          description: "bad credentials"
  /api/v1/article:
    post:
      tags:
      - article-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleDto'
        "404":
          description: "User not found"
        "409":
          description: "The article is already in your favorites"
  /api/v1/article/isFavorite:
    post:
      tags:
      - article-controller
      operationId: isFavorite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Articles'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Articles'
        "404":
          description: "User not found"
  /api/v1/article/favorites:
    get:
      tags:
      - article-controller
      operationId: findAll
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      - name: title
        in: query
        required: false
        schema:
          type: string
      - name: order
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesPageable'
        "404":
          description: "User not found"
components:
  schemas:
    Article:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        summary:
          type: string
        publishedAt:
          type: string
          format: date-time
        apiId:
          type: integer
          format: int64
        favorites:
          type: array
          items:
            $ref: '#/components/schemas/Favorite'
    Favorite:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        article:
          $ref: '#/components/schemas/Article'
        createdAt:
          type: string
          format: date-time
        updateAt:
          type: string
          format: date-time
        isDeleted:
          type: boolean
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    Token:
      type: object
      properties:
        id:
          type: integer
          format: int64
        token:
          type: string
        revoked:
          type: boolean
        expired:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        tokens:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Token'
        favorites:
          type: array
          items:
            $ref: '#/components/schemas/Favorite'
        enabled:
          type: boolean
        credentialsNonExpired:
          type: boolean
        accountNonExpired:
          type: boolean
        accountNonLocked:
          type: boolean
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        username:
          type: string
        deleted:
          type: boolean
    RegisterRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
    AuthenticationResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    AuthenticationRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    ArticleDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        summary:
          type: string
        publishedAt:
          type: string
          format: date-time
        apiId:
          type: integer
          format: int64
        favorite:
          type: boolean
        favoriteDate:
          type: string
          format: date-time
    Articles:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ArticleDto'
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    ArticlesPageable:
      type: object
      properties:
        sizeContent:
          type: integer
          format: int64
        index:
          type: integer
          format: int32
        data:
          type: array
          items:
            $ref: '#/components/schemas/ArticleDto'
